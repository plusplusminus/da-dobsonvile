{"version":3,"sources":["../../../src/components/Base/Copy.js"],"names":["styles","base","fontFamily","sans","lineHeight","margin","padding","size","tiny","small","medium","large","huge","mb","none","marginBottom","space0","space1","space2","space4","weight","light","fontWeight","regular","bold","color","textBase","blue","textBlue","textLight","light0","textLightO","white","textWhite","red","textRed","variant","uppercase","textTransform","truncate","overflow","textOverflow","whiteSpace","left","textAlign","right","center","justify","Copy","props","children","override","isParent","Element","style","temp","create","copy","reduce","result","item","defaultProps","propTypes","oneOf","node","isRequired","objectOf","oneOfType","string","number","object","bool"],"mappings":"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","file":"Copy.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { flatten } from 'rambda'\nimport { StyleSheet, css } from 'aphrodite';\nimport { fonts, fontStyles, fontWeight, letterSpacing, colors, spacing } from 'common/styles/variables';\n\nconst styles = {\n  base: {\n    fontFamily: fonts.sans,\n    lineHeight: 1,\n    margin: 0,\n    padding: 0,\n  },\n\n  size: {\n    tiny: {\n      ...fontStyles(\"12px\", `${13 * 1.5}px`),\n    },\n    small: {\n      ...fontStyles(\"13px\", `${13 * 1.5}px`),\n    },\n    medium: {\n      ...fontStyles(\"16px\", `${16 * 1.5}px`),\n    },\n    large: {\n      ...fontStyles(\"18px\", `${18 * 1.5}px`),\n    },\n    huge: {\n      ...fontStyles(\"20px\", `${20 * 1.5}px`),\n    },\n  },\n\n  mb: {\n    none: {\n      marginBottom: spacing.space0,\n    },\n    small: {\n      marginBottom: spacing.space1,\n    },\n    medium: {\n      marginBottom: spacing.space2,\n    },\n    large: {\n      marginBottom: spacing.space4,\n    },\n  },\n\n  weight: {\n    light: {\n      fontWeight: fontWeight.light,\n    },\n    regular: {\n      fontWeight: fontWeight.regular,\n    },\n    medium: {\n      fontWeight: fontWeight.medium,\n    },\n    bold: {\n      fontWeight: fontWeight.bold,\n    },\n  },\n\n  color: {\n    base: {\n      color: colors.textBase,\n    },\n    blue: {\n      color: colors.textBlue,\n    },\n    light: {\n      color: colors.textLight,\n    },\n    light0: {\n      color: colors.textLightO,\n    },\n    white: {\n      color: colors.textWhite,\n    },\n    red: {\n      color: colors.textRed,\n    },\n  },\n\n  variant: {\n    uppercase: {\n      textTransform: \"uppercase\",\n    },\n    truncate: {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    left: {\n      textAlign: \"left\",\n    },\n    right: {\n      textAlign: \"right\",\n    },\n    center: {\n      textAlign: \"center\",\n    },\n    justify: {\n      textAlign: \"justify\",\n    },\n  },\n};\n\nconst Copy = (props) => {\n\n  const { color, children, mb, override, size, truncate, uppercase, left, right, center, justify, weight, isParent } = props;\n\n  let Element = \"\";\n\n  if (isParent) {\n    Element = \"span\";\n  } else {\n    Element = \"p\";\n  }\n\n  const style = [\n    styles.base,\n    size && styles.size[size],\n    mb && styles.mb[mb],\n    weight && styles.weight[weight],\n    color && styles.color[color],\n    truncate && styles.variant.truncate,\n    uppercase && styles.variant.uppercase,\n    left && styles.variant.left,\n    right && styles.variant.right,\n    center && styles.variant.center,\n    justify && styles.variant.justify,\n    override && override,\n  ]\n\n  const temp = StyleSheet.create({\n    copy: style.reduce((result, item) => {\n      if (item) {\n        return {\n          ...result,\n          ...item,\n        };\n      }\n      return result;\n    }, {}),\n  });\n\n  return (\n    <Element\n      className={css(temp.copy)}\n    >\n      {children}\n    </Element>\n  );\n}\n\nCopy.defaultProps = {\n  color: \"base\",\n  mb: \"medium\",\n  override: {},\n  size: \"medium\",\n  isParent: false,\n  truncate: false,\n  uppercase: false,\n  left: true,\n  right: false,\n  center: false,\n  justify: false,\n  weight: \"light\",\n}\n\nCopy.propTypes = {\n  /** The copy color */\n  color: PropTypes.oneOf([\n    \"base\",\n    \"blue\",\n    \"textBase\",\n    \"textLight\",\n    \"textLightO\",\n    \"textWhite\",\n  ]),\n  /** Text for the copy */\n  children: PropTypes.node.isRequired,\n  /** Margin bottom  */\n  mb: PropTypes.oneOf([\n    \"none\",\n    \"tiny\",\n    \"small\",\n    \"medium\",\n    \"large\",\n  ]),\n  /** Override styles */\n  override: PropTypes.objectOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.object,\n    ]),\n  ),\n  /** If the Copy container is a parent of other <p> tags then make the component a 'span' instead*/\n  isParent: PropTypes.bool,\n  /** Declares the font size of the heading */\n  size: PropTypes.oneOf([\n    \"tiny\",\n    \"small\",\n    \"medium\",\n    \"large\",\n    \"huge\",\n  ]).isRequired,\n  /** Whether or not to hide the text overflow with an ellipsis */\n  truncate: PropTypes.bool,\n  /** Whether or not to set the copy in all caps */\n  uppercase: PropTypes.bool,\n  /** Whether or not to align left */\n  left: PropTypes.bool,\n  /** Whether or not to align right */\n  right: PropTypes.bool,\n  /** Whether or not to align center */\n  center: PropTypes.bool,\n  /** Adjusts the font weight of the copy */\n  weight: PropTypes.oneOf([\n    \"bold\",\n    \"medium\",\n    \"regular\",\n    \"light\",\n  ]),\n};\n\nCopy.styles = styles;\n\nexport default Copy;\n"]}