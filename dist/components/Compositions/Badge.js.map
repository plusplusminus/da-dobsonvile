{"version":3,"sources":["../../../src/components/Compositions/Badge.js"],"names":["styles","badge","base","paddingTop","space05","paddingRight","space2","paddingBottom","paddingLeft","borderRadius","overflow","textTransform","color","white","display","alignItems","icon","status","neutral","backgroundColor","brandWhite","statusNeutral","info","statusInfo","success","statusSuccess","warning","statusWarning","danger","statusDanger","Badge","title","baseStyles","create","letterSpacing","space0","space1","textLight","textWhite","small","defaultProps","propTypes","string","isRequired","oneOf"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,SAAS;AACbC,SAAM;AACJC,UAAK;AACHC,kBAAY,mBAAQC,OADjB;AAEHC,oBAAc,mBAAQC,MAFnB;AAGHC,qBAAe,mBAAQH,OAHpB;AAIHI,mBAAa,mBAAQF,MAJlB;AAKHG,oBAAc,mBAAQL,OALnB;AAMHM,gBAAU,QANP;AAOHC,qBAAe,WAPZ;AAQHC,aAAO,kBAAOC,KARX;AASHC,eAAS,aATN;AAUHC,kBAAY;AAVT;AADD,GADO;;AAgBbC,QAAK;AACHF,aAAS,MADN;AAEHC,gBAAY;AAFT,GAhBQ;AAoBbE,UAAQ;AACNC,aAAS;AACPC,uBAAiB,kBAAOC,UADjB;AAEPR,aAAO,kBAAOS;AAFP,KADH;AAKNC,UAAM;AACJH,uBAAiB,kBAAOI;AADpB,KALA;AAQNC,aAAS;AACPL,uBAAiB,kBAAOM;AADjB,KARH;AAWNC,aAAS;AACPP,uBAAiB,kBAAOQ;AADjB,KAXH;AAcNC,YAAQ;AACNT,uBAAiB,kBAAOU;AADlB;AAdF;AApBK,CAAf;;AAwCE,IAAMC,QAAQ,SAARA,KAAQ,OAA4B;AAAA,MAAzBb,MAAyB,QAAzBA,MAAyB;AAAA,MAAjBc,KAAiB,QAAjBA,KAAiB;AAAA,MAAVf,IAAU,QAAVA,IAAU;;;AAE1C,MAAMgB,aAAa,sBAAWC,MAAX,CAAkB;AACnChC,wBACKD,OAAOC,KAAP,CAAaC,IADlB,EAEMe,UAAUjB,OAAOiB,MAAP,CAAcA,MAAd,CAFhB,CADmC;AAKnCD,uBACKhB,OAAOgB,IADZ,CALmC;AAQnCe,WAAM;AACJG,qBAAc;AADV;AAR6B,GAAlB,CAAnB;;AAaA,SACE;AAAA;AAAA,MAAK,WAAW,oBAAIF,WAAW/B,KAAf,CAAhB;AACIe,YACA;AACE,UAAI,mBAAQmB,MADd;AAEE,UAAI,mBAAQC,MAFd;AAGE,aAAQnB,WAAW,SAAX,GAAuB,kBAAOoB,SAA9B,GAA0C,kBAAOC,SAH3D;AAIE,UAAI,MAJN;AAKE,UAAI,MALN;AAME,YAAMtB;AANR,MAFJ;AAWE;AAAA;AAAA;AACE,cAAM,MADR;AAEE,eAAQC,WAAW,SAAX,GAAuB,OAAvB,GAAiC,OAF3C;AAGE,YAAI,MAHN;AAIE,kBAAU,EAACiB,eAAc,yBAAcK,KAA7B;AAJZ;AAMGR;AANH;AAXF,GADF;AAsBD,CArCC;;AAuCFD,MAAMU,YAAN,GAAqB;AACnBT,SAAO,SADY;AAEnBf,QAAM,MAFa;AAGnBC,UAAQ;AAHW,CAArB;;AAMAa,MAAMW,SAAN,GAAkB;AAChB;AACAzB,QAAM,oBAAU0B,MAFA;AAGhB;AACAX,SAAO,oBAAUW,MAAV,CAAiBC,UAJR;AAKhB;AACA1B,UAAQ,oBAAU2B,KAAV,CAAgB,CACtB,QADsB,EAEtB,MAFsB,EAGtB,SAHsB,EAItB,SAJsB,EAKtB,SALsB,CAAhB,EAMLD;AAZa,CAAlB;;kBAeeb,K","file":"Badge.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, css } from 'aphrodite';\nimport { fonts, fontStyles, fontWeight, colors, spacing, letterSpacing, opacity } from 'common/styles/variables';\nimport { dobsonville } from 'common/images';\nimport { Heading, Icon, Copy } from 'components';\nimport {rgba} from '../../utils/helpers'\n\nconst styles = {\n  badge:{\n    base:{\n      paddingTop: spacing.space05,\n      paddingRight: spacing.space2,\n      paddingBottom: spacing.space05,\n      paddingLeft: spacing.space2,\n      borderRadius: spacing.space05,\n      overflow: 'hidden',\n      textTransform: 'uppercase',\n      color: colors.white,\n      display: 'inline-flex',\n      alignItems: 'center',\n    },\n  },\n\n  icon:{\n    display: 'flex',\n    alignItems: 'center',\n  },\n  status: {\n    neutral: {\n      backgroundColor: colors.brandWhite,\n      color: colors.statusNeutral,\n    },\n    info: {\n      backgroundColor: colors.statusInfo,\n    },\n    success: {\n      backgroundColor: colors.statusSuccess,\n    },\n    warning: {\n      backgroundColor: colors.statusWarning,\n    },\n    danger: {\n      backgroundColor: colors.statusDanger,\n    },\n  },\n};\n\n  const Badge = ({ status, title, icon}) => {\n\n  const baseStyles = StyleSheet.create({\n    badge: {\n      ...styles.badge.base,\n      ...(status && styles.status[status]),\n    },\n    icon:{\n      ...styles.icon,\n    },\n    title:{\n      letterSpacing:'10px',\n    },\n  });\n\n  return (\n    <div className={css(baseStyles.badge)}>\n      { icon &&\n        <Icon\n          ml={spacing.space0}\n          mr={spacing.space1}\n          color={ status === \"neutral\" ? colors.textLight : colors.textWhite }\n          fs={\"14px\"}\n          lh={\"14px\"}\n          name={icon}\n        />\n      }\n      <Copy\n        size={\"tiny\"}\n        color={ status === \"neutral\" ? \"light\" : \"white\" }\n        mb={\"none\"}\n        override={{letterSpacing:letterSpacing.small}}\n      >\n        {title}\n      </Copy>\n    </div>\n  )\n}\n\nBadge.defaultProps = {\n  title: \"Secured\",\n  icon: \"lock\",\n  status: \"info\",\n}\n\nBadge.propTypes = {\n  /** Icon for the Badge */\n  icon: PropTypes.string,\n  /** Title of the Badge */\n  title: PropTypes.string.isRequired,\n  /** Status of Badge to indicate color */\n  status: PropTypes.oneOf([\n    \"danger\",\n    \"info\",\n    \"neutral\",\n    \"success\",\n    \"warning\",\n  ]).isRequired,\n}\n\nexport default Badge;\n"]}