{"version":3,"sources":["../../../src/components/Compositions/CardPerson.js"],"names":["createMarkup","content","__html","styles","card","base","display","width","padding","marginBottom","space4","backgroundColor","bgWhite","border","borderColor","borderBase","rounded","borderRadius","space05","wrapper","float","paddingTop","space3","paddingRight","paddingBottom","space2","paddingLeft","figure","margin","image","maxWidth","height","table","fontFamily","sans","space1","td","tdLabel","letterSpacing","small","fontWeight","medium","CardPerson","title","url","imageUrl","cta","meta","tel","email","baseStyles","create","propTypes","string","isRequired","bool","defaultProps"],"mappings":"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","file":"CardPerson.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyleSheet, css } from \"aphrodite\";\nimport { Copy, Heading, MoreLink } from \"components\";\nimport { fonts, fontStyles, fontWeight, colors, spacing, letterSpacing, opacity, media } from \"../../common/styles/variables\";\n\nconst createMarkup = (content) => ({ __html: `${content}` });\n\nconst styles = {\n  card: {\n    base:{\n      display: 'inline-block',\n      width: '100%',\n      padding: 0,\n      marginBottom: spacing.space4,\n      backgroundColor: colors.bgWhite,\n    },\n    border: {\n      border: '1px solid',\n      borderColor: colors.borderBase,\n    },\n    rounded:{\n      borderRadius: spacing.space05,\n    }\n  },\n  wrapper:{\n    float: 'left',\n    paddingTop: spacing.space3,\n    paddingRight: spacing.space4,\n    paddingBottom: spacing.space2,\n    paddingLeft: spacing.space4,\n  },\n  figure: {\n    base: {\n      float: 'left',\n      margin: 0,\n    },\n    image: {\n      maxWidth: '140px',\n      height: 'auto',\n    },\n  },\n  table:{\n    fontFamily: fonts.sans,\n    marginBottom: spacing.space1,\n    ...fontStyles('12px','14px'),\n  },\n  td:{\n    paddingRight: spacing.space2,\n    paddingBottom: spacing.space05,\n  },\n  tdLabel:{\n    letterSpacing: letterSpacing.small,\n    fontWeight: fontWeight.medium,\n    paddingRight: spacing.space2,\n    paddingBottom: spacing.space05,\n  }\n};\n\nconst CardPerson = ({ title, url, imageUrl, border, cta, meta, tel, email, rounded }) => {\n\n  const baseStyles = StyleSheet.create({\n    card: {\n      ...styles.card.base,\n      ...(border && styles.card.border),\n      ...(rounded && styles.card.rounded),\n    },\n    wrapper: {\n      ...styles.wrapper,\n    },\n    figure: {\n      ...styles.figure.base,\n    },\n    image: {\n      ...styles.figure.image,\n    },\n    table: {\n      ...styles.table,\n    },\n    td: {\n      ...styles.td,\n    },\n    tdLabel: {\n      ...styles.tdLabel,\n    }\n  });\n\n  return (\n    <div className={css(baseStyles.card)}>\n      { imageUrl &&\n        <figure className={css(baseStyles.figure)}>\n          <img src={imageUrl} alt=\"\" className={css(baseStyles.image)} />\n        </figure>\n      }\n\n      <div className={css(baseStyles.wrapper)}>\n        <header>\n          <Heading\n            level={3}\n            weight={\"medium\"}\n            color={\"blue\" }\n            size={\"small\"}\n          >\n            {title}\n          </Heading>\n          <Heading\n            mb={\"small\"}\n            size={\"tiny\" }\n            color={\"blue\" }\n            weight={\"medium\"}\n          >\n            { meta }\n          </Heading>\n        </header>\n\n\n        { tel || email ?\n          <table className={css(baseStyles.table)}>\n            { tel &&\n              <tr>\n                <td className={css(baseStyles.tdLabel)}>Telephone:</td>\n                <td className={css(baseStyles.td)}>{tel}</td>\n              </tr>\n            }\n            { email &&\n            <tr>\n              <td className={css(baseStyles.tdLabel)}>Email:</td>\n              <td className={css(baseStyles.td)}>{email}</td>\n            </tr>\n          }\n          </table>\n        : null }\n\n        { cta &&\n          <MoreLink href={url}>\n            { cta }\n          </MoreLink>\n        }\n      </div>\n    </div>\n  );\n}\n\nCardPerson.propTypes = {\n  /** Title of Card */\n  title: PropTypes.string.isRequired,\n  /** Meta info of person */\n  meta: PropTypes.string,\n  /** URL of Card */\n  url: PropTypes.string.isRequired,\n  /** ImageURL of Card */\n  imageUrl: PropTypes.string,\n  /** Call to Action of Card */\n  cta: PropTypes.string.isRequired,\n  /** Is the card bordered */\n  border: PropTypes.bool.isRequired,\n  /** Is the card rounded */\n  rounded: PropTypes.bool.isRequired,\n  /** Email details of person */\n  email: PropTypes.string,\n  /** Tel number of person */\n  tel: PropTypes.string,\n};\n\nCardPerson.defaultProps = {\n  title: null,\n  url: null,\n  meta: null,\n  border: true,\n  rounded: true,\n  imageUrl: null,\n  cta: null,\n  tel: null,\n  email: null,\n};\n\nexport default CardPerson;\n"]}